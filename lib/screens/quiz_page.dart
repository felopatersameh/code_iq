import 'dart:math';import 'package:code_iq/screens/result_screen.dart';import 'package:flutter/material.dart';import '../Widget/question_part.dart';import '../main.dart';import '../models/questions_by_language.dart';class QuizPage extends StatefulWidget {  final String selectedLanguage;  const QuizPage({    super.key,    required this.selectedLanguage,  });  @override  State<QuizPage> createState() => _QuizPageState();}class _QuizPageState extends State<QuizPage> {  final Random _random = Random();  int _selectedOption = -1;  int _currentQuestionIndex = 0;  bool _answered = false;  bool _isCorrect = false;  Color border = Colors.transparent;  int _correctAnswers = 0;  int _wrongAnswers = 0;  List<Map<String, dynamic>> _shuffledQuestions = [];  @override  void initState() {    super.initState();    _shuffleQuestions();  }  void _shuffleQuestions() {    setState(() {      _shuffledQuestions =          List.from(QuestionsByLanguage.getQuestions(widget.selectedLanguage));      _shuffledQuestions.shuffle(_random);      _currentQuestionIndex = 0;      _answered = false;      _isCorrect = false;      _selectedOption = -1;      _correctAnswers = 0;      _wrongAnswers = 0;    });  }  void _checkAnswer() {    setState(() {      _answered = true;      _isCorrect = _selectedOption ==          _shuffledQuestions[_currentQuestionIndex]['answerIndex'];      if (_isCorrect) {        _correctAnswers++;      } else {        _wrongAnswers++;      }      border = _isCorrect ? Colors.green : Colors.red;    });  }  void _nextQuestion() {    setState(() {      _answered = false;      _isCorrect = false;      border = Colors.transparent;      _selectedOption = -1;      if (_currentQuestionIndex < _shuffledQuestions.length - 1) {        _currentQuestionIndex++;      } else {        _showQuizCompletedDialog();      }    });  }  void _showQuizCompletedDialog() {    final totalQuestions = _shuffledQuestions.length;    final correctPercentage =        ((_correctAnswers / totalQuestions) * 100).toStringAsFixed(1);    showDialog(      context: context,      builder: (_) => AlertDialog(        title: const Text("The quiz is over!"),        content: Text(          "You have completed all the questions!\n\n"          "Correct Answers: $_correctAnswers\n"          "Wrong Answers: $_wrongAnswers\n"          "Pass Percentage: $correctPercentage%",        ),        actions: [          TextButton(            onPressed: () {              Navigator.of(context).pop();              _shuffleQuestions();            },            child: const Text("Restart Quiz"),          ),          TextButton(            onPressed: () {              Navigator.of(context).push(                MaterialPageRoute(                  builder: (context) => ResultScreen(                    grade: correctPercentage,                  ),                ),              );            },            child: const Text("Cancel"),          ),        ],      ),    );  }  @override  Widget build(BuildContext context) {    final question = _shuffledQuestions[_currentQuestionIndex];    return Scaffold(      body: SafeArea(        child: Column(          children: [            QuestionPart(              logo: QuestionsByLanguage.getLogo(widget.selectedLanguage),              number: _currentQuestionIndex + 1,              question: question['question'],            ),            Padding(              padding: const EdgeInsets.all(16.0),              child: Column(                crossAxisAlignment: CrossAxisAlignment.stretch,                children: [                  const SizedBox(height: 16),                  ...List.generate(question['options'].length, (index) {                    Color optionBorder = Colors.transparent;                    if (_answered) {                      if (index == question['answerIndex']) {                        optionBorder = Colors.green;                      } else if (index == _selectedOption) {                        optionBorder = Colors.red;                      }                    } else if (index == _selectedOption) {                      optionBorder = const Color(0xffa76ae4);                    }                    return GestureDetector(                      onTap: !_answered                          ? () {                              setState(() {                                _selectedOption = index;                              });                            }                          : null,                      child: Container(                        decoration: BoxDecoration(                          border: Border.all(color: optionBorder, width: 2.0),                          borderRadius: BorderRadius.circular(8.0),                        ),                        margin: const EdgeInsets.symmetric(vertical: 8.0),                        child: ListTile(                          splashColor: Colors.cyanAccent,                          title: Text(question['options'][index]),                        ),                      ),                    );                  }),                  const SizedBox(height: 16),                  ElevatedButton(                    onPressed: _answered ? _nextQuestion : _checkAnswer,                    child:                        Text(_answered ? "Next question" : "Check the answer"),                  ),                ],              ),            ),          ],        ),      ),    );  }}